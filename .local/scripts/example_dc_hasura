#!/usr/bin/env bash

cat <<'EOM'
version: '3.6'

# PGSQL_HOST="%APP_hasura_pgsql"
# PGSQL_PORT=5432
# POSTGRES_DB="postgres"
# POSTGRES_USER="postgres"
# POSTGRES_PASSWORD="postgrespassword"
# HASURA_VOLUME_NAME="db_concave_api_hasura"
# HASURA_NETWORK_NAME="app-netrunner-%APP"
# HASURA_GRAPHQL_ADMIN_SECRET="hasuraadminpassword"
# HASURA_STAGING_ENDPOINT="http://localhost:8080"

# the HS512 must match the one on the Hasura you dev on
# generate a 32 long key with https://generate-secret.now.sh/32
# put that key inside this HS512 generator https://passwordsgenerator.net/sha512-hash-generator/ 
# YOUR ADMIN JWT
# HASURA_GRAPHQL_JWT_SECRET=

services:
  postgres:
    image: postgres:13.4
    container_name: ${PGSQL_HOST}
    ports:
      - '${PGSQL_PORT}:5432'
    networks:
      - external-app-proxy
    restart: always
    volumes:
      - hasura_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  graphql-engine:
    image: hasura/graphql-engine:v2.19.0
    container_name: %APP_hasura_backend
    ports:
      - 8080:8080
    networks:
      - external-app-proxy
    depends_on:
      - postgres
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${PGSQL_HOST}:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${PGSQL_HOST}:5432/${POSTGRES_DB}
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${PGSQL_HOST}:5432/${POSTGRES_DB}
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_DEV_MODE: "false"
      # HASURA_GRAPHQL_ADMIN_INTERNAL_ERRORS: "false"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: 'anon'
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS512", "key": "${HASURA_GRAPHQL_JWT_SECRET}"}'
      # HASURA_GRAPHQL_AUTH_HOOK: ${HASURA_GRAPHQL_AUTH_HOOK}
      # HASURA_GRAPHQL_AUTH_HOOK_MODE: 'GET'
      LAMBDA_CNVDATA: ${LAMBDA_CNVDATA}
      LAMBDA_CNVTRESO: ${LAMBDA_CNVTRESO}
      LAMBDA_CONTRACT_EVENTS: ${LAMBDA_CONTRACT_EVENTS}
      LAMBDA_MARKETPLACE: ${LAMBDA_MARKETPLACE}
      LAMBDA_AMM: ${LAMBDA_AMM}
      ACTION_BASE_URL: 'http://host.docker.internal:3000'

networks:
  external-app-proxy:
    name: ${HASURA_NETWORK_NAME}
    external: true

volumes:
  hasura_data:
    name: ${HASURA_VOLUME_NAME}
EOM
